Задача 5
1.	Спроектируйте  базу данных  Exams для автоматизации учета информации о приеме экзаменов преподавателями. 
Для каждого преподавателя должна храниться информация: 
•	Табельный номер преподавателя (уникален, содержит только цифры);
•	ФИО преподавателя;
•	Дата приема на работу;
•	Категория преподавателя. 
Кроме того, хранится информация о приеме экзаменов преподавателями:
•	номер направления на сдачу экзамена (уникален);
•	Преподаватель, который принимал экзамен;
•	ФИО учащегося;
•	сдаваемый предмет;
•	дата сдачи экзамена;
•	оценка.

В СУБД MY SQL, используя команды определения данных создать базу данных.  Создать таблицы Преподаватель и Экзамен, для каждой таблицы определив первичные ключи. Определить в подчиненной таблице внешний ключ. Создать связь между таблицами с помощью внешнего ключа, обеспечив каскадное удаление и обновление данных. (+1)
2.	Используя команды манипулирования данными, добавить в созданные таблицы по пять записей, таких чтобы результаты нижеперечисленных запросов содержали не менее одной записи. (+1)
  
3.	Написать  запросы для получения следующей информации (результаты выполнения запросов не должны быть пустыми):
1)	Выведите ФИО учеников, получивших на экзамене неудовлетворительную оценку (ниже 4). (+1)
2)	Выведите  ФИО преподавателя и количество учащихся, у которых он принимал экзамен. (+1)
3)	Выберите ФИО учащихся, получивших максимальную оценку. (+1)
4)	Выведите фамилии учащихся и их оценки, сдававших экзамены преподавателям высшей категории. (+1)


-- 1. Создание БД и таблиц
CREATE DATABASE Exams;
USE Exams;

CREATE TABLE Преподаватель (
    табельный_номер INT PRIMARY KEY CHECK (табельный_номер REGEXP '^[0-9]+$'),
    ФИО VARCHAR(255),
    дата_приема DATE,
    категория VARCHAR(100)
);


CREATE TABLE Экзамен (
    номер_направления INT PRIMARY KEY,
    табельный_номер_преподавателя INT,
    ФИО_учащегося VARCHAR(255),
    предмет VARCHAR(100),
    дата_сдачи DATE,
    оценка INT,
    FOREIGN KEY (табельный_номер_преподавателя) REFERENCES Преподаватель(табельный_номер)
    ON DELETE CASCADE ON UPDATE CASCADE
);



-- 2. Вставка данных (обеспечиваем непустые результаты для запросов)
INSERT INTO Преподаватель (табельный_номер, ФИО, дата_приема, категория) VALUES
(1, 'Иванов И.И.', '2024-03-10', 'высшая'),
(2, 'Петров П.П.', '2023-11-15', 'вторая'),
(3, 'Сидоров С.С.', '2024-01-20', 'высшая'),
(4, 'Кузнецов К.К.', '2023-05-05', 'высшая'),
(5, 'Смирнова С.С.', '2023-09-12', 'первая');

INSERT INTO Экзамен (номер_направления, табельный_номер_преподавателя, ФИО_учащегося, предмет, дата_сдачи, оценка) VALUES
(1, 1, 'Александров А.А.', 'Математика', '2024-05-15', 5), -- Максимальная оценка
(2, 2, 'Борисов Б.Б.', 'Физика', '2024-05-16', 3),  -- Неудовлетворительная оценка
(3, 3, 'Васильев В.В.', 'Химия', '2024-05-17', 5), -- Максимальная оценка
(4, 4, 'Григорьев Г.Г.', 'История', '2024-05-18', 4),
(5, 5, 'Дмитриев Д.Д.', 'Литература', '2024-05-19', 2); -- Неудовлетворительная оценка


-- 3. SQL-запросы

-- 1) Ученики с неудовлетворительной оценкой
SELECT ФИО_учащегося
FROM Экзамен
WHERE оценка < 4;

-- 2) ФИО преподавателя и количество учащихся
SELECT p.ФИО, COUNT(e.ФИО_учащегося) AS количество_учащихся
FROM Преподаватель p
LEFT JOIN Экзамен e ON p.табельный_номер = e.табельный_номер_преподавателя
GROUP BY p.ФИО;


-- 3) Учащиеся с максимальной оценкой
SELECT ФИО_учащегося
FROM Экзамен
WHERE оценка = (SELECT MAX(оценка) FROM Экзамен);


-- 4) Фамилии учащихся и их оценки (преподаватели высшей категории)
SELECT e.ФИО_учащегося, e.оценка
FROM Экзамен e
JOIN Преподаватель p ON e.табельный_номер_преподавателя = p.табельный_номер
WHERE p.категория = 'высшая';