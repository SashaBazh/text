Задача 25
1.	Спроектируйте базу данных Sale для автоматизации учета информации о продажах товаров в магазине. 
Для каждого товара должна храниться информация: 
•	артикул товара (уникален, содержит только цифры);
•	название товара;
•	категория товара;
•	количество товара на складе. 
Кроме того, хранится информация обо всех продажах товаров:
•	Номер продажи (уникален);
•	проданный товар;
•	количество проданного товара;
•	дата продажи товара;

В СУБД MS SQL SERVER, используя команды определения данных создать базу данных.  Создать таблицы Товар и Продажи, для каждой таблицы определив первичные ключи. Определить в подчиненной таблице внешний ключ. Создать связь между таблицами с помощью внешнего ключа, обеспечив каскадное удаление и обновление данных. (+1)
2.	Используя команды манипулирования данными, добавить в созданные таблицы по пять записей, таких чтобы результаты нижеперечисленных запросов содержали не менее одной записи. (+1)

3.	Используя команды языка SQL, выполнить следующие действия:
1)	Создайте представление Товары1, содержащее информацию об артикуле товара, названии товара и общем количестве проданного товара. (+1)
2)	Создайте представление Продажи1, о названии товара, дате продажи и количестве проданного товара. (+1)
3)	Выберите из представления Продажи1 информацию об общем количестве проданных товаров на каждую дату. (+1)
4)	Выберите из представления Товары1 информацию о товарах, где количество проданных товаров выше среднего. (+1)

-- 1. Создание БД и таблиц
CREATE DATABASE Sale;
GO
USE Sale;
GO

CREATE TABLE Товар (
    артикул INT PRIMARY KEY CHECK (артикул LIKE '[0-9]%'),
    название VARCHAR(255),
    категория VARCHAR(100),
    количество_на_складе INT
);
GO

CREATE TABLE Продажи (
    номер_продажи INT PRIMARY KEY,
    артикул_товара INT,
    количество INT,
    дата_продажи DATE,
    FOREIGN KEY (артикул_товара) REFERENCES Товар(артикул)
    ON DELETE CASCADE ON UPDATE CASCADE
);
GO


-- 2. Вставка данных (обеспечиваем непустые результаты для запросов)
INSERT INTO Товар (артикул, название, категория, количество_на_складе) VALUES
(1001, 'Ноутбук', 'Электроника', 10),
(1002, 'Стул', 'Мебель', 20),
(1003, 'Книга', 'Канцелярия', 50),
(1004, 'Телефон', 'Электроника', 15),
(1005, 'Стол', 'Мебель', 8);


INSERT INTO Продажи (номер_продажи, артикул_товара, количество, дата_продажи) VALUES
(1, 1001, 2, '2024-01-15'),  -- Выше среднего
(2, 1002, 5, '2024-01-15'),
(3, 1003, 1, '2024-01-16'),
(4, 1004, 1, '2024-01-15'),
(5, 1005, 3, '2024-01-16');



-- 3. SQL-запросы

-- 1) Представление Товары1
GO
CREATE VIEW Товары1 AS
SELECT t.артикул, t.название, SUM(p.количество) AS общее_проданное
FROM Товар t
LEFT JOIN Продажи p ON t.артикул = p.артикул_товара
GROUP BY t.артикул, t.название;
GO

-- 2) Представление Продажи1
GO
CREATE VIEW Продажи1 AS
SELECT t.название, p.дата_продажи, p.количество
FROM Продажи p
JOIN Товар t ON p.артикул_товара = t.артикул;
GO

-- 3) Общее количество проданных товаров на каждую дату
SELECT дата_продажи, SUM(количество) AS ОбщееКоличество
FROM Продажи1
GROUP BY дата_продажи;


-- 4) Товары с количеством продаж выше среднего
SELECT артикул, название, общее_проданное
FROM Товары1
WHERE общее_проданное > (SELECT AVG(общее_проданное) FROM Товары1);