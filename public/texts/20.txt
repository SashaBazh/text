Задача 20
1.	Спроектируйте  базу данных  Exams для автоматизации учета информации о приеме  экзаменов преподавателями.  Для каждого преподавателя должна храниться информация: 
•	Табельный номер преподавателя (уникален, содержит только цифры);
•	ФИО преподавателя;
•	Дата приема на работу;
•	Категория (первая, вторая, высшая).
Кроме того, хранится информация о приеме экзаменов преподавателями:
•	номер направления на сдачу экзамена (уникален, авто инкремент)
•	преподаватель, который принимал экзамен;
•	ФИО учащегося;
•	сдаваемый предмет;
•	дата сдачи экзамена;
•	оценка.

В СУБД MY SQL, используя команды определения данных создать базу данных. Создать таблицы Преподаватель и Экзамен, для каждой таблицы определив первичные ключи. Определить в подчиненной таблице внешний ключ. Создать связь между таблицами с помощью внешнего ключа, обеспечив каскадное удаление и обновление данных. (+1)
2.	Используя команды манипулирования данными, добавить в созданные таблицы по пять записей, таких чтобы результаты нижеперечисленных запросов содержали не менее одной записи. (+1)

3.	Используя команды языка SQL, выполнить следующие действия:
1)	Написать триггер, который при добавлении нового преподавателя автоматически создает для данного преподавателя сдачу экзамена учащимся со следующими значениями: (+2)
•	номер направления – default;
•	ФИО учащегося – Студент1;
•	сдаваемый предмет – Предмет1;
•	дата сдачи экзамена – текущая;
	оценка – 4. 
2)	Продемонстрировать работу триггера, добавив информацию о преподавателе. (+1) 
3)	Написать  запрос  для получения следующей информации (результаты выполнения запроса не должны быть пустыми): Выведите ФИО преподавателей, принявших экзамены сегодня. (+1)




-- 1. Создание БД и таблиц
CREATE DATABASE IF NOT EXISTS Exams;
USE Exams;

CREATE TABLE IF NOT EXISTS Преподаватель (
    табельный_номер INT PRIMARY KEY CHECK (табельный_номер REGEXP '^[0-9]+$'),
    ФИО VARCHAR(255),
    дата_приема DATE,
    категория ENUM('первая', 'вторая', 'высшая')
);

CREATE TABLE IF NOT EXISTS Экзамен (
    номер_направления INT PRIMARY KEY AUTO_INCREMENT,
    табельный_номер_преподавателя INT,
    ФИО_учащегося VARCHAR(255),
    предмет VARCHAR(100),
    дата_сдачи DATE,
    оценка INT,
    FOREIGN KEY (табельный_номер_преподавателя) REFERENCES Преподаватель(табельный_номер)
    ON DELETE CASCADE ON UPDATE CASCADE
);
-- 2. Триггер
DELIMITER $$
CREATE TRIGGER АвтоЭкзамен
AFTER INSERT ON Преподаватель
FOR EACH ROW
BEGIN
    INSERT INTO Экзамен (табельный_номер_преподавателя, ФИО_учащегося, предмет, дата_сдачи, оценка)
    VALUES (NEW.табельный_номер, 'Студент1', 'Предмет1', CURDATE(), 4);
END $$
DELIMITER ;

-- 3. Демонстрация триггера
INSERT INTO Преподаватель VALUES (401, 'Новый Преподаватель', CURDATE(), 'вторая');

-- 4) Экзамены сегодня
SELECT ФИО 
FROM Преподаватель 
WHERE табельный_номер IN (
    SELECT табельный_номер_преподавателя 
    FROM Экзамен 
    WHERE дата_сдачи = CURDATE()
);
